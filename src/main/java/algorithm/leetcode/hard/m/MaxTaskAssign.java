package algorithm.leetcode.hard.m;

import java.util.Arrays;
import java.util.Map;
import java.util.TreeMap;

public class MaxTaskAssign {

    /**
     * 给你 n 个任务和 m 个工人。
     * 每个任务需要一定的力量值才能完成，
     * 需要的力量值保存在下标从 0 开始的整数数组 tasks 中，
     * 第 i 个任务需要 tasks[i] 的力量才能完成。
     * 每个工人的力量值保存在下标从 0 开始的整数数组 workers 中，
     * 第 j 个工人的力量值为 workers[j] 。
     * 每个工人只能完成 一个 任务，且力量值需要 大于等于 该任务的力量要求值（即 workers[j] >= tasks[i] ）。
     * 除此以外，你还有 pills 个神奇药丸，可以给 一个工人的力量值 增加 strength 。
     * 你可以决定给哪些工人使用药丸，但每个工人 最多 只能使用 一片 药丸。
     * 给你下标从 0 开始的整数数组tasks 和 workers 以及两个整数 pills 和 strength ，
     * 请你返回 最多 有多少个任务可以被完成。
     * n == tasks.length
     * m == workers.length
     * 1 <= n, m <= 5 * 10^4
     * 0 <= pills <= m
     * 0 <= tasks[i], workers[j], strength <= 10^9
     */
    public int maxTaskAssign(int[] tasks, int[] workers, int pills, int strength) {
        Arrays.sort(tasks);
        Arrays.sort(workers);
        int count = 0;
        for (int i = 0, j = 0; i < tasks.length && j < workers.length;) {
            if (tasks[i] <= workers[j]) {
                i++;
                j++;
                count++;
            } else {
                j++;
            }
        }
        int left = count;
        int right = Math.min(count+pills, Math.min(workers.length, tasks.length));
        while (left < right) {
            int mid = (left + right + 1) / 2;
            int copyPills = pills;
            boolean flag = true;
            TreeMap<Integer, Integer> map = new TreeMap<>();

            for (int i = 0; i < mid; i++) {
                int key = workers[workers.length - mid + i];
                map.put(key, map.getOrDefault(key, 0) + 1);
            }
            for (int i = mid-1; i >= 0; i--) {
                Integer equalCount = map.get(tasks[i]);
                if (equalCount != null) {
                    if (equalCount == 1) {
                        map.remove(tasks[i]);
                    } else {
                        map.put(tasks[i], equalCount-1);
                    }
                } else {
                    Map.Entry<Integer, Integer> higherEntry = map.higherEntry(tasks[i]);
                    if (higherEntry != null) {
                        Integer higherCount = higherEntry.getValue();
                        if (higherCount == 1) {
                            map.remove(higherEntry.getKey());
                        } else {
                            map.put(higherEntry.getKey(), higherCount-1);
                        }
                    } else {
                        if (copyPills == 0) {
                            flag = false;
                            break;
                        }
                        int need = tasks[i] - strength;
                        if (map.containsKey(need)) {
                            Integer needCount = map.get(need);
                            if (needCount == 1) {
                                map.remove(need);
                            } else {
                                map.put(need, needCount-1);
                            }
                        } else {
                            Map.Entry<Integer, Integer> needEntry = map.higherEntry(need);
                            if (needEntry == null) {
                                flag = false;
                                break;
                            }
                            if (needEntry.getValue() == 1) {
                                map.remove(needEntry.getKey());
                            } else {
                                map.put(needEntry.getKey(), needEntry.getValue()-1);
                            }
                        }
                        copyPills--;
                    }
                }

            }
            if (flag) {
                left = mid;
            } else {
                right = mid - 1;
            }
        }
        return left;
//        int len = Math.min(count+pills, workers.length);
//        PriorityQueue<int[]> queue = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));
//        for (int i = 0; i < len; i++) {
//            queue.add(new int[]{workers[workers.length-len+i], 0});
//        }
//        int[] nextWorkers = new int[len];
//        System.arraycopy(workers, workers.length-len, nextWorkers, 0, len);
//        for (int i = 0; i < pills; i++) {
//            nextWorkers[i] += strength;
//        }
//        Arrays.sort(nextWorkers);
//        int ans = 0;
//        for (int i = 0; i < tasks.length; ) {
//            if (queue.isEmpty()) {
//                return ans;
//            }
//            while (!queue.isEmpty()) {
//                int[] poll = queue.poll();
//                if (poll[0] >= tasks[i]) {
//                    i++;
//                    ans++;
//                    break;
//                } else {
//                    if (pills > 0 && poll[1] == 0) {
//                        queue.add(new int[]{poll[0]+strength, 1});
//                        pills--;
//                    }
//                }
//            }
//        }
//        for (int i = 0, j = 0; i < tasks.length && j < nextWorkers.length; ) {
//            if (tasks[i] <= nextWorkers[j]) {
//                i++;
//                j++;
//                ans++;
//            } else {
//                if (pills > 0 && nextWorkers[j] + strength >= tasks[i]) {
//                    pills--;
//                    ans++;
//                } else {
//                    j++;
//                }
//                j++;
//            }
//        }
        //return ans;
    }

    public static void main(String[] args) {
        MaxTaskAssign maxTaskAssign = new MaxTaskAssign();
        System.out.println(1 == maxTaskAssign.maxTaskAssign(
                new int[]{35}, new int[]{83,20,4,66}, 3, 41));
        System.out.println(143 == maxTaskAssign.maxTaskAssign(
                new int[]{1943,2068,4077,7832,8061,6939,6263,8917,8008,5348,8837,4753,4607,7638,9000,7222,4552,1123,9225,6896,4154,6303,3186,2325,9994,5855,8851,7377,1930,1187,5094,2689,8852,1507,1567,9575,1193,1557,8840,9075,5032,3642,6917,7968,5310,2315,7516,4776,3091,7027,1788,2007,2651,6112,4264,5644,3585,9408,7410,9605,8151,1538,6905,6759,4518,3444,5036,1589,3902,3037,1468,9179,3000,5339,6805,7394,9418,9262,2888,4708,3402,5554,8714,7393,2848,5946,9808,4301,6675,8564,6300,4359,9506,1946,9673,7412,1164,2986,2198,5144,3763,4782,8835,6994,8035,3332,2342,5243,3150,9084,6519,9798,7682,9919,7473,7686,9978,8092,9897,3985,9874,5842,9740,2145,2426,7069,8963,9250,4142,9434,1895,6559,3233,8431,6278,6748,7305,4359,2144,8009,4890,6486,7464,8645,1704,5915,9586,1394,7504,2124,3150,2051,5026,7612,3715,5757,4355,6394,3202,2777,3949,2349,7398,3029,3081,5116,5078,8048,9934,4348,8518,5201,1203,7935,5006,6388,8680,3427,6048,1957,4026,4618,4080},
                new int[]{875,2347,939,3664,3926,4555,1947,4406,4601,3502,4964,1307,4232,2968,4572,3139,2788,1847,1208,2019,4184,1664,1747,3690,4333,891,686,1959,2218,4972,806,741,1490,4529,2909,925,2040,1234,1264,1135,3640,1455,2933,3699,2856,3074,4579,2458,2090,833,4140,4534,2336,4363,1948,4546,4155,3735,3577,2780,4874,1747,4844,3482,3053,3534,549,4500,2237,2128,1554,3210,4161,2211,950,3732,2182,1148,4368,4050,1452,1015,3192,4318,3908,2590,1103,2811,2821,690,2718,3360,2659,3315,579,3108,2979,3903,4367,1906,4964,889,4803,825,2270,4794,4825,4485,4461,1639,3857,1330,3169,2425,3694,1980,2268,3002,2177,3225,2499,2517,1916,2844,760,2167,1786,3179,3222,1432,3775,4747,1764,690,3223,4684,890,2701,1045,3034,1381,1011,2150,4798,2247,1334,3058,934,2895,1484,2784,3341,4412,1748,625,2610,3488,4810,669,4275,4929,1014,2104,3111},
                122, 3131));

        System.out.println(3 == maxTaskAssign.maxTaskAssign(
                new int[]{5,9,8,5,9}, new int[]{1,6,4,2,6}, 1, 5));
        System.out.println(2 == maxTaskAssign.maxTaskAssign(
                new int[]{10,15,30}, new int[]{0,10,10,10,10}, 3, 10));
        System.out.println(1 == maxTaskAssign.maxTaskAssign(
                new int[]{5,4}, new int[]{0,0,0}, 1, 5));
        System.out.println(3 == maxTaskAssign.maxTaskAssign(
                new int[]{3,2,1}, new int[]{0,3,3}, 1, 1));

        System.out.println(118 == maxTaskAssign.maxTaskAssign(
                new int[]{7908,9988,9571,5279,4047,9760,3274,7098,6367,4774,9975,5544,8811,2564,3835,6634,5648,9052,8143,5502,1285,7300,5630,7578,6522,2243,7284,6534,3766,1835,4153,4333,6338,6373,7517,6930,8190,2834,2218,2945,6929,4170,9254,9312,9789,1324,3851,4038,9497,6486,7949,5781,7787,5185,2726,8538,3698,6929,2613,6860,6981,7506,5294,6213,9848,4539,1234,8108,3832,5068,2712,6301,8340,7950,1320,9111,5411,8075,9752,6882,9679,9463,6580,9986,5114,4483,7816,1878,2204,4364,1603,3131,3492,8579,3026,2521,5679,8630,8667,3827,1555,3296,1118,4644,4866,1312,7632,9550,6914,9195,1009,2145,5184,4996,2913,6914,3584,4866,8505,7708,1309,2780,1794,6103,6161,9576,9885,1843,2180,9261,6516,7411,8606,4633,5653,8562,9533,8516,2503,3270,5264,1737,1603,1376,1834,6990,8234,8975,4194,2276,7633,3401,3521,6003,7685,2139,9061,2786,8637,7517,1411,3732,9200,9772,8017,4008,9189,4728,5141,8600,5512,4239,5236,6909,9942,4712,7017,9755,2365,3130,4668,9101,1414,7787,4533,7845,3755,2534,7896,4710,7581,2301,5079,4236,7276,8656,4777,1857},
                new int[]{4612,4669,4273,1929,1925,1342,4565,2152,1909,4897,2697,1419,1998,4789,2940,3388,4619,1427,1798,917,2270,1639,1633,4669,2674,2348,3714,3909,4359,3151,1639,4533,3444,3531,887,528,2346,1481,831,2345,3610,4507,2890,4740,3959,648,1468,3063,2416,4091,1151,2196,999,2708,578,978,4113,4229,2052,2154,2149,583,1029,2020,4498,4638,4932,2986,2749,1047,2434,971,1645,570,1395,3603,4581,3607,3158,2758,1046,1171,2204,1421,3708,4769,3399,981,3396,4837,3633,4067,4141,2037,1622,2257,1529,1371,4090,3273,4767,3543,1098,503,3905,4427,3875,2594,4878,2252,912,4838,509,2989,3304,4268,1520,4027,3691,993,600,3529,3762,1854,592,1579,2191,3051,1897,4050,1345,3416,1108,4862,4587,3065,3486,2138,1272,4237,4235,4107,1951,3747,2774,4944,3815,2560,3688,1838,2821,3098,1361,1439,2486,4599,2215,1908,2432,1862,1780,1143,4117,3175,3839,3019,4576,4343,4186,1643,3472,1637,693,4128,4709,4500,2639,4022,2886,1708,2721,4686,4870,772,557,1845,2788,821,3752},
                35, 2208));
        System.out.println(3 == maxTaskAssign.maxTaskAssign(
                new int[]{5181,2717,7678,7730,5931,8066,2266,5873,3645,6636,3308,2848,2082,7158,5398,4030,4942,1723,6614,5165,8086,7526,9503,2051,5305,6606,7514,5078,1149,5782,4717,5969,4966,1292,4370,3863,4111,1140,2980,5295,5347,8700,2833,6750,2352,7604,6305,2697,7501,7719,7955,7901,1779,6850,6456,1040,9230,2712,8129,9875,9385,1814,8167,2960,9191,3588,7339,2255,5314,2873,3294,5375,6745,5984,9717,4983,2558,8075,7988,6490,4499,7236,2097,8097,2923,2972,8609,8993,6354,6502,3340,1666,1281,9703,8869,5274,8150,5270,3437,3171,7423,5865,1995,7002,8550,9908,7114,8777,1250,5855,3501,9316,5380,3877},
                new int[]{2167,4646,1582,1102,2113,1258,4341,3193,3136,4096,3311,1501,3499,1815,1282,4914,772,4785,2632,1223,3479,3010,3505,1613,4257,1192,2918,2664,4274,4036,1039,1250,4713,3443,4514,4117,3400,3825,1782,3552,2386,865,2290,3618,793,1297,908,2187,3273,4531,3859,605,4274,3951,583,1135,2802,3585,727,2359,4011,4071,2035,4775,764,4702,2050,3304,3876,3772,4946,4371,1993,4746,1124,1221,1368,831,2337,506,951,3874,3094,2744,4258,4704,3229,1015,4876,1893,3098,4464,4189,4201,3986,3673,4126,2424,4280,2780,1748,1650,1591,753,3392,2498,835,608,1746,1243,3778,1382,4207,1909,832,4501,781,1274,973,4966,1873,2512,3644,3244,1120,4979,3945,1481,2172,4410,3572,4597,3414,4306,4714,4047,3239,4557,3226,3273,4997,3374},
                139, 2075));

    }
}
