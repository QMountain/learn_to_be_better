package algorithm.leetcode.hard.m;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

public class MinMalwareSpread {

    public int minMalwareSpread(int[][] graph, int[] initial) {
        Arrays.sort(initial);
        Set<Integer> initialSet = new HashSet<>();
        for (int i : initial) {
            initialSet.add(i);
        }
        int n = graph.length;
        int[] searched = new int[n];
        int ans = initial[0];
        int max = 0;
        for (int i : initial) {
            if (searched[i] == 1) {
                continue;
            }
            boolean singleOrigin = true;
            Set<Integer> group = new HashSet<>();
            group.add(i);
            Set<Integer> level = new HashSet<>();
            level.add(i);
            searched[i] = 1;
            while (!level.isEmpty()) {
                Set<Integer> next = new HashSet<>();
                for (Integer infect : level) {
                    int[] row = graph[infect];
                    for (int j = 0; j < n; j++) {
                        // infect节点已感染 且与 j节点连接
                        if (row[j] == 1 && searched[j] == 0) {
                            if (initialSet.contains(j)) {
                                singleOrigin = false;
                            }
                            next.add(j);
                            searched[j] = 1;
                        }
                    }
                }
                level = next;
                group.addAll(next);
            }
            if (singleOrigin && group.size() > max) {
                max = group.size();
                ans = i;
            }

        }
        return ans;
    }

    public static void main(String[] args) {
        MinMalwareSpread minMalwareSpread = new MinMalwareSpread();
        System.out.println(2 == minMalwareSpread.minMalwareSpread(
                new int[][]{{1,1,0},{1,1,0},{0,0,1}}, new int[]{0,1,2}));
        System.out.println(1 == minMalwareSpread.minMalwareSpread(
                new int[][]{{1,1,1},{1,1,1},{1,1,1}}, new int[]{1,2}));
        System.out.println(0 == minMalwareSpread.minMalwareSpread(
                new int[][]{{1,0,0},{0,1,0},{0,0,1}}, new int[]{0,2}));
        System.out.println(0 == minMalwareSpread.minMalwareSpread(
                new int[][]{{1,1,0},{1,1,0},{0,0,1}}, new int[]{0,1}));
    }
}
