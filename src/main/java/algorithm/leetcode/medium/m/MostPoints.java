package algorithm.leetcode.medium.m;

/**
 * 给你一个下标从 0 开始的二维整数数组 questions ，其中 questions[i] = [pointsi, brainpoweri] 。
 * 这个数组表示一场考试里的一系列题目，你需要 按顺序 （也就是从问题 0 开始依次解决），
 * 针对每个问题选择 解决 或者 跳过 操作。
 * 解决问题 i 将让你 获得  pointsi 的分数，
 * 但是你将 无法 解决接下来的 brainpoweri 个问题（即只能跳过接下来的 brainpoweri 个问题）。
 * 如果你跳过问题 i ，你可以对下一个问题决定使用哪种操作。
 * 比方说，给你 questions = [[3, 2], [4, 3], [4, 4], [2, 5]] ：
 * 如果问题 0 被解决了， 那么你可以获得 3 分，但你不能解决问题 1 和 2 。
 * 如果你跳过问题 0 ，且解决问题 1 ，你将获得 4 分但是不能解决问题 2 和 3 。
 * 请你返回这场考试里你能获得的 最高 分数。
 */
public class MostPoints {

    // 1 <= questions.length <= 10^5
    // questions[i].length == 2
    // 1 <= pointsi, brainpoweri <= 10^5
    public long mostPoints(int[][] questions) {
        int length = questions.length;
        // 0 选了的最大值
        // 1 没选的最大值
        // 2 上一个选的位置
        // 3 最近的前一个可选的位置
        long[][] dp = new long[length+1][5];
        for (int i = 0; i < length; i++) {
            dp[i+1][4] = i;
            int[] question = questions[i];
            int idx = i + question[1] + 2;
            if (idx <= length) {
                dp[idx][3] = Math.max(dp[idx][3], i+1);
            }
            dp[i+1][3] = Math.max(dp[i+1][3], dp[i][3]);
            if (dp[i][0] > dp[i][1]) {
                dp[i+1][1] = dp[i][0];
                dp[i + 1][2] = i;
            } else {
                dp[i+1][1] = dp[i][1];
                dp[i + 1][2] = dp[i][2];
            }
            long[] pre = dp[(int) dp[i+1][3]];
            if (pre[0] >= pre[1]) {
                dp[i+1][0] = pre[0] + question[0];
                continue;
            }
            long[] start = pre;
            while (start[0] < start[1]) {
                start = dp[(int) start[3]];
            }
            for (int j = (int) start[4]; j <= pre[4]; j++) {
                int i1 = questions[j][1];
                if (i1 + j + 1 <= i) {
                    dp[i+1][0] = Math.max(dp[i+1][0], dp[j+1][0] + question[0]);
                }
            }

        }
        return Math.max(dp[length][0], dp[length][1]);
    }

    public long mostPoints2(int[][] questions) {
        int length = questions.length;
        // 0 选了 1 没选
        int[][] dp = new int[length][2];
        dp[0][0] = questions[0][0];
        for (int i = 1; i < length; i++) {
            int[] question = questions[i];
            dp[i][1] = Math.max(dp[i-1][0], dp[i-1][1]);
            for (int j = i-1; j >= 0; j--) {
                int[] question1 = questions[j];
                if (question1[1] + j < i) {
                    if (dp[j][0] >= dp[j][1]) {
                        dp[i][0] = Math.max(dp[i][0], dp[j][0] + question[0]);
                        break;
                    } else {
                        dp[i][0] = Math.max(dp[i][0], dp[j][0] + question[0]);
                    }
                } else if (j == 0) {
                    dp[i][0] = Math.max(dp[i][0], question[0]);
                }
            }
        }
        return Math.max(dp[length-1][0], dp[length-1][1]);
    }

    public static void main(String[] args) {
        MostPoints mostPoints = new MostPoints();
        int[][] ints = new int[100000][2];
        for (int i = 0; i < 100000; i++) {
            ints[i][0] = 100000;
            ints[i][1] = 1;
        }
        System.out.println(mostPoints.mostPoints(ints));
        System.out.println(363 == mostPoints.mostPoints(new int[][]{{62, 62}, {1, 84}, {44, 43}, {15, 95}, {18, 35}, {9, 45}, {7, 98}, {64, 78}, {77, 31}, {39, 93}, {19, 8}, {90, 82}, {69, 87}, {27, 30}, {44, 97}, {22, 95}, {97, 97}, {50, 52}, {93, 72}, {26, 37}, {52, 34}, {26, 21}, {66, 67}, {97, 41}, {27, 86}, {31, 46}, {10, 31}, {30, 45}, {98, 57}, {5, 67}, {33, 42}, {79, 87}, {27, 88}, {33, 22}, {94, 45}, {2, 29}, {87, 98}, {70, 31}, {54, 53}, {90, 82}, {85, 52}, {8, 17}, {7, 36}, {67, 81}, {67, 60}, {14, 54}, {93, 4}, {75, 50}, {31, 13}, {39, 3}, {69, 71}, {63, 36}, {65, 86}, {97, 38}, {1, 3}, {50, 2}, {26, 10}, {97, 16}, {34, 12}, {43, 59}, {19, 60}, {27, 82}, {56, 79}, {57, 30}, {77, 45}, {67, 78}, {44, 84}, {45, 72}, {88, 79}, {16, 23}, {95, 48}, {40, 63}, {68, 72}, {45, 27}, {81, 80}, {62, 26}, {23, 82}, {74, 89}, {67, 87}, {58, 25}, {65, 84}, {51, 89}, {96, 100}, {77, 95}, {93, 86}, {21, 76}, {40, 94}, {47, 60}}
        ));
        System.out.println(845 == mostPoints.mostPoints(new int[][]{{72, 5}, {36, 5}, {95, 5}, {50, 1}, {62, 1}, {14, 3}, {72, 5}, {86, 2}, {43, 3}, {51, 3}, {14, 1}, {91, 5}, {47, 4}, {72, 4}, {63, 5}, {40, 3}, {68, 1}, {8, 3}, {84, 5}, {7, 5}, {40, 1}, {35, 3}, {66, 2}, {39, 5}, {40, 1}, {92, 3}, {67, 5}, {34, 3}, {84, 4}, {75, 5}, {6, 1}, {71, 3}, {77, 3}, {25, 3}, {53, 3}, {32, 3}, {88, 5}, {18, 2}, {21, 3}, {78, 2}, {69, 5}, {45, 4}, {94, 2}, {70, 1}, {85, 2}, {7, 2}, {68, 4}, {71, 4}, {57, 2}, {12, 5}, {53, 5}, {51, 3}, {46, 1}, {28, 3}}
        ));
        /*System.out.println(mostPoints.mostPoints(new int[][]{{10000, 10000}, {10000, 10000}, {10000, 10000}, {10000, 10000}, {10000, 10000},
                {10000, 10000}, {10000, 10000}, {10000, 10000}, {10000, 10000}, {10000, 10000}, {10000, 10000},
                {10000, 10000}, {10000, 10000}, {10000, 10000}, {10000, 10000}, {10000, 10000}, {10000, 10000}, {10000, 10000},
                {10000, 10000}, {10000, 10000}, {10000, 10000}, {10000, 10000}, {10000, 10000}, {10000, 10000}}));
        System.out.println(463 == mostPoints.mostPoints(new int[][]{{20,73},{92,49},{65,60},
                {41,18},{68,6},{64,71},
                {11,4},{17,60},{44,47},{52,13},{37,32},
                {56,16},{9,64},{65,60},{12,92},{44,87},{53,72},
                {93,80},{80,33},{88,88},{60,51},{16,64},{93,85},{88,13},{23,32},{27,80},{83,19},{41,98},{15,26},{34,71},{7,81},{7,100},{51,51},{69,32},{93,2},{33,16},{21,11},{100,91},{73,51},{6,99},{57,13},{92,96},{5,79},{86,78},{33,68},{83,38},{82,97},{39,48},{55,93},{41,55},{1,25},{63,69},{92,76},{40,67},{26,19},{40,16},{48,19},{76,73},{43,29},{15,6},{32,21},{92,74},{1,97},{99,56},{21,27},{2,45},{13,10},{13,92},{87,91},{85,16},{14,64},{68,72},{53,12},{66,62},{3,3},{44,61},{71,76},{43,15},{12,78},{92,33},{10,33},{25,29},{22,90},{14,21},{11,54},{45,43},{65,56},{89,81}}
        ));*/
        System.out.println(781 == mostPoints.mostPoints(
                new int[][]{{21,2},{1,2},{12,5},
                        {7,2}, {35,3},{32,2},
                        {80,2},{91,5}, {92,3},
                        {27,3},{19,1},{37,3},
                        {85,2},
                        {33,4},{25,1},{91,4},
                        {44,3},{93,3},{65,4}, {82,3},
                        {85,5},{81,3},{29,2},{25,1},{74,2},{58,1},{85,1},{84,2},{27,2},{47,5},{48,4},{3,2},{44,3},{60,5},{19,2},{9,4},{29,5},{15,3},{1,3},{60,2},{63,3},{79,3},{19,1},{7,1},{35,1},{55,4},{1,4},{41,1},{58,5}}
        ));

        System.out.println(43 == mostPoints.mostPoints(new int[][]{{43, 5}}));
        System.out.println(5 == mostPoints.mostPoints(new int[][]{{3, 2}, {4, 3}, {4, 4}, {2, 5}}));
        System.out.println(7 == mostPoints.mostPoints(new int[][]{{1,1},{2,2},{3,3},{4,4},{5,5}}));
    }


}
